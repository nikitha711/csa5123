import numpy as np

def clean_text(text):
    return ''.join([c for c in text.upper() if c.isalpha()])

def text_to_numbers(text):
    return [ord(c) - ord('A') for c in text]

def numbers_to_text(numbers):
    return ''.join([chr(n % 26 + ord('A')) for n in numbers])

def prepare_blocks(numbers, block_size=2):
    if len(numbers) % block_size != 0:
        numbers.append(25)  
    return [numbers[i:i+block_size] for i in range(0, len(numbers), block_size)]

def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

key_matrix = np.array([[9, 4], [5, 7]])

def hill_encrypt(plaintext, key_matrix):
    cleaned = clean_text(plaintext)
    numbers = text_to_numbers(cleaned)
    blocks = prepare_blocks(numbers)
    ciphertext = []

    print("\nEncryption steps:")
    for block in blocks:
        vec = np.array(block).reshape(2, 1)
        result = np.dot(key_matrix, vec) % 26
        ciphertext.extend(result.flatten())
        print(f"Plain: {block} -> Cipher: {result.flatten().tolist()}")
    
    return numbers_to_text(ciphertext)


def hill_decrypt(ciphertext, key_matrix):
    det = int(np.round(np.linalg.det(key_matrix))) % 26
    det_inv = mod_inverse(det, 26)

    if det_inv is None:
        raise ValueError("Matrix is not invertible under mod 26")

  
    inv_matrix = np.array([[ key_matrix[1][1], -key_matrix[0][1]],
                           [-key_matrix[1][0],  key_matrix[0][0]]])
    inv_matrix = (det_inv * inv_matrix) % 26
    inv_matrix = inv_matrix.astype(int)

    print("\nDecryption steps:")
    numbers = text_to_numbers(ciphertext)
    blocks = prepare_blocks(numbers)
    decrypted = []

    for block in blocks:
        vec = np.array(block).reshape(2, 1)
        result = np.dot(inv_matrix, vec) % 26
        decrypted.extend(result.flatten())
        print(f"Cipher: {block} -> Plain: {result.flatten().tolist()}")

    return numbers_to_text(decrypted)


plaintext = "meet me at the usual place at ten rather than eight oclock"


cipher = hill_encrypt(plaintext, key_matrix)
print("\nEncrypted Ciphertext:", cipher)


decrypted = hill_decrypt(cipher, key_matrix)
print("\nDecrypted Plaintext:", decrypted)
