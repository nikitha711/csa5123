def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def mod_inverse(a, m):
    for x in range(1, m):
        if (a * x) % m == 1:
            return x
    return None

def affine_decrypt(ciphertext, a, b):
    decrypted_text = ""
    m = 26  # Number of letters in the alphabet
    a_inv = mod_inverse(a, m)

    if a_inv is None:
        raise ValueError("No modular inverse for a")

    for char in ciphertext:
        if char.isalpha():
            x = ord(char) - ord('A')
            decrypted_char = (a_inv * (x - b)) % m
            decrypted_text += chr(decrypted_char + ord('A'))
        else:
            decrypted_text += char

    return decrypted_text

ciphertext = "YOUR_CIPHERTEXT_HERE"
frequency = {'B': 0, 'U': 0}  # Example frequencies
a = 5
b = 8

decrypted_message = affine_decrypt(ciphertext, a, b)
print(decrypted_message)
