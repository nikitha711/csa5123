from collections import Counter

ENGLISH_FREQ = {
    'E': 12.70, 'T': 9.06, 'A': 8.17, 'O': 7.51, 'I': 6.97,
    'N': 6.75, 'S': 6.33, 'H': 6.09, 'R': 5.99, 'D': 4.25,
    'L': 4.03, 'C': 2.78, 'U': 2.76, 'M': 2.41, 'W': 2.36,
    'F': 2.23, 'G': 2.02, 'Y': 1.97, 'P': 1.93, 'B': 1.49,
    'V': 0.98, 'K': 0.77, 'X': 0.15, 'J': 0.15, 'Q': 0.10, 'Z': 0.07
}

def shift_text(text, key):
    result = ''
    for char in text:
        if char.isalpha():
            shifted = (ord(char.upper()) - ord('A') - key) % 26
            result += chr(shifted + ord('A'))
        else:
            result += char
    return result

def score_text(text):
    counts = Counter(c for c in text if c.isalpha())
    total = sum(counts.values())
    if total == 0:
        return 0
    score = 0
    for letter in ENGLISH_FREQ:
        freq = (counts.get(letter, 0) / total) * 100
        score += abs(ENGLISH_FREQ[letter] - freq)
    return score  # Lower score means better match

def frequency_attack(ciphertext, top_n=10):
    candidates = []
    for key in range(26):
        decrypted = shift_text(ciphertext, key)
        score = score_text(decrypted)
        candidates.append((key, decrypted, score))
    
    candidates.sort(key=lambda x: x[2])
    return candidates[:top_n]

if __name__ == "__main__":
    ciphertext = "WKH HDJOH KDV ODQGHG"
    top_n = 10
    results = frequency_attack(ciphertext, top_n)
    
    for rank, (key, text, score) in enumerate(results, 1):
        print(f"{rank}. Key: {key}, Score: {score:.2f}")
        print(f"   Plaintext: {text}\n")
