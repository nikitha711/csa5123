def create_playfair_matrix(key):
    key = key.replace("J", "I").upper()
    matrix = []
    seen = set()
    
    for char in key:
        if char not in seen and char.isalpha():
            seen.add(char)
            matrix.append(char)
    
    for char in "ABCDEFGHIKLMNOPQRSTUVWXYZ":
        if char not in seen:
            seen.add(char)
            matrix.append(char)
    
    return [matrix[i:i + 5] for i in range(0, 25, 5)]

def prepare_message(message):
    message = message.replace("J", "I").upper()
    message = ''.join(filter(str.isalpha, message))
    prepared = []
    
    i = 0
    while i < len(message):
        if i + 1 < len(message) and message[i] == message[i + 1]:
            prepared.append(message[i] + 'X')
            i += 1
        else:
            prepared.append(message[i] + (message[i + 1] if i + 1 < len(message) else 'X'))
            i += 2
            
    return prepared

def find_position(char, matrix):
    for i, row in enumerate(matrix):
        if char in row:
            return (i, row.index(char))
    return None

def encrypt_pair(pair, matrix):
    row1, col1 = find_position(pair[0], matrix)
    row2, col2 = find_position(pair[1], matrix)
    
    if row1 == row2:
        return matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
    elif col1 == col2:
        return matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
    else:
        return matrix[row1][col2] + matrix[row2][col1]

def playfair_encrypt(message, key):
    matrix = create_playfair_matrix(key)
    prepared_message = prepare_message(message)
    encrypted_message = ''.join(encrypt_pair(pair, matrix) for pair in prepared_message)
    return encrypted_message

key = "MFHIKUNOPQZVWXYELARGDSTBC"
message = "Must see you over Cadogan West. Coming at once."
encrypted_message = playfair_encrypt(message, key)
print("Encrypted Message:", encrypted_message)
