# Helper function to XOR two binary strings
def xor(a, b):
    """ XOR two binary strings """
    return ''.join(str(int(x) ^ int(y)) for x, y in zip(a, b))

# Permutations and shifts for SDES
def p10(key):
    """ Apply the P10 permutation to the key """
    p10_table = [2, 4, 1, 6, 3, 9, 0, 8, 7, 5]
    return ''.join(key[i] for i in p10_table)

def p8(key):
    """ Apply the P8 permutation to the key """
    p8_table = [5, 2, 6, 3, 7, 4, 9, 8]
    return ''.join(key[i] for i in p8_table)

def left_shift(key):
    """ Perform a left shift operation on a binary string """
    return key[1:] + key[0]

def generate_keys(key):
    """ Generate two subkeys (K1, K2) from the given key """
    key = p10(key)
    left, right = key[:5], key[5:]
    left, right = left_shift(left), left_shift(right)
    K1 = p8(left + right)
    left, right = left_shift(left), left_shift(right)
    left, right = left_shift(left), left_shift(right)
    K2 = p8(left + right)
    return K1, K2

def sbox(s, sbox_table):
    """ S-box substitution """
    row = int(s[0] + s[3], 2)
    col = int(s[1] + s[2], 2)
    return bin(int(sbox_table[row][col], 10))[2:].zfill(2)

S0 = [
    ['1', '0', '3', '2'],
    ['3', '2', '1', '0'],
    ['0', '1', '2', '3'],
    ['3', '0', '1', '2']
]

S1 = [
    ['0', '1', '2', '3'],
    ['3', '0', '1', '2'],
    ['3', '2', '1', '0'],
    ['2', '3', '0', '1']
]

def f(block, key):
    """ Apply the f function used in SDES encryption/decryption """
    left, right = block[:4], block[4:]
    expanded_right = right[1] + right[2] + right[3] + right[0]
    xor_result = xor(expanded_right, key)
    left_s, right_s = xor_result[:4], xor_result[4:]
    left_s = sbox(left_s, S0)
    right_s = sbox(right_s, S1)
    return left_s + right_s

def encrypt(block, key):
    """ SDES encryption function """
    K1, K2 = generate_keys(key)
    block = p10(block)  # Apply initial permutation (IP)
    left, right = block[:4], block[4:]
    
    # First round
    temp = f(left + right, K1)
    left, right = xor(temp[:4], left), xor(temp[4:], right)

    # Swap for second round
    left, right = right, left

    # Second round
    temp = f(left + right, K2)
    left, right = xor(temp[:4], left), xor(temp[4:], right)

    # Combine the result and apply inverse IP
    block = p8(left + right)
    return block

def decrypt(block, key):
    """ SDES decryption function """
    K1, K2 = generate_keys(key)
    K1, K2 = K2, K1  # Swap K1 and K2 for decryption
    block = p10(block)  # Apply initial permutation (IP)
    left, right = block[:4], block[4:]
    
    # First round
    temp = f(left + right, K1)
    left, right = xor(temp[:4], left), xor(temp[4:], right)

    # Swap for second round
    left, right = right, left

    # Second round
    temp = f(left + right, K2)
    left, right = xor(temp[:4], left), xor(temp[4:], right)

    # Combine the result and apply inverse IP
    block = p8(left + right)
    return block

# CBC Encryption
def cbc_encrypt(plaintext, key, iv):
    ciphertext = iv
    for i in range(0, len(plaintext), 8):
        block = plaintext[i:i+8]
        block = xor(block, ciphertext[-8:])
        ciphertext += encrypt(block, key)
    return ciphertext[8:]

# CBC Decryption
def cbc_decrypt(ciphertext, key, iv):
    decrypted = iv
    for i in range(0, len(ciphertext), 8):
        block = ciphertext[i:i+8]
        decrypted_block = decrypt(block, key)
        decrypted += xor(decrypted_block, ciphertext[i-8:i])
    return decrypted[8:]

# Test Data
iv = '10101010'  # 8-bit IV
key = '01111111101'  # 10-bit key for SDES (length must be 10 bits)
plaintext = '0000000100100011'  # 16-bit plaintext

# Ensure the plaintext length is a multiple of 8 bits
if len(plaintext) % 8 != 0:
    # Pad the plaintext if necessary
    plaintext = plaintext.ljust(len(plaintext) + (8 - len(plaintext) % 8), '0')

ciphertext = cbc_encrypt(plaintext, key, iv)
decrypted_text = cbc_decrypt(ciphertext, key, iv)

print(f'Ciphertext: {ciphertext}')
print(f'Decrypted: {decrypted_text}')
