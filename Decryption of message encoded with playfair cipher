import string

def generate_key_square(keyword):
    keyword = keyword.upper().replace('J', 'I')
    key_square = ""
    used = set()

    for char in keyword:
        if char not in used and char in string.ascii_uppercase:
            key_square += char
            used.add(char)

    for char in string.ascii_uppercase:
        if char not in used and char != 'J':
            key_square += char
            used.add(char)

    matrix = [list(key_square[i*5:(i+1)*5]) for i in range(5)]
    return matrix

def find_position(letter, matrix):
    for row in range(5):
        for col in range(5):
            if matrix[row][col] == letter:
                return row, col
    return None

def decrypt_digraph(digraph, matrix):
    a, b = digraph
    row1, col1 = find_position(a, matrix)
    row2, col2 = find_position(b, matrix)

    if row1 == row2:
        return matrix[row1][(col1 - 1) % 5] + matrix[row2][(col2 - 1) % 5]
    elif col1 == col2:
        return matrix[(row1 - 1) % 5][col1] + matrix[(row2 - 1) % 5][col2]
    else:
        return matrix[row1][col2] + matrix[row2][col1]

def decrypt_playfair(ciphertext, keyword):
    ciphertext = ciphertext.replace("J", "I").replace(" ", "").upper()
    digraphs = [ciphertext[i:i+2] for i in range(0, len(ciphertext), 2)]
    matrix = generate_key_square(keyword)
    
    plaintext = ""
    for digraph in digraphs:
        plaintext += decrypt_digraph(digraph, matrix)
    return plaintext


cipher_text = ("KXJEY UREBE ZWEHE WRYTU HEYFS "
               "KREHE GOYFI WTTTU OLKSY CAJPO "
               "BOTEI ZONTX BYBNT GONEY CUZWR "
               "GDSON SXBOU YWRHE BAAHY USEDQ")


keyword = "MONARCHY"  
decrypted_message = decrypt_playfair(cipher_text, keyword)
print("Decrypted Message:\n", decrypted_message)
