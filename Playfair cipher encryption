#include <stdio.h>
#include <string.h>
#include <ctype.h>

#define SIZE 5

void createMatrix(char *key, char matrix[SIZE][SIZE]) {
    int i, j, k = 0;
    int alpha[26] = {0};
    int len = strlen(key);
    
    for (i = 0; i < len; i++) {
        key[i] = toupper(key[i]);
        if (key[i] == 'J') key[i] = 'I'; // Treat 'J' as 'I'
        if (!alpha[key[i] - 'A'] && key[i] >= 'A' && key[i] <= 'Z') {
            alpha[key[i] - 'A'] = 1;
            matrix[k / SIZE][k % SIZE] = key[i];
            k++;
        }
    }
    
    for (i = 0; i < 26; i++) {
        if (!alpha[i] && (i + 'A' != 'J')) {
            matrix[k / SIZE][k % SIZE] = i + 'A';
            k++;
        }
    }
}

void encrypt(char *plaintext, char matrix[SIZE][SIZE], char *ciphertext) {
    int i, j, k = 0;
    int len = strlen(plaintext);
    
    for (i = 0; i < len; i += 2) {
        char a = toupper(plaintext[i]);
        char b = (i + 1 < len) ? toupper(plaintext[i + 1]) : 'X';
        
        if (a == b) b = 'X'; 
        
        int row1, col1, row2, col2;
        for (row1 = 0; row1 < SIZE; row1++) {
            for (col1 = 0; col1 < SIZE; col1++) {
                if (matrix[row1][col1] == a) {
                    break;
                }
            }
            if (col1 < SIZE) break;
        }
        
        for (row2 = 0; row2 < SIZE; row2++) {
            for (col2 = 0; col2 < SIZE; col2++) {
                if (matrix[row2][col2] == b) {
                    break;
                }
            }
            if (col2 < SIZE) break;
        }
        
        if (row1 == row2) {
            ciphertext[k++] = matrix[row1][(col1 + 1) % SIZE];
            ciphertext[k++] = matrix[row2][(col2 + 1) % SIZE];
        } else if (col1 == col2) {
            ciphertext[k++] = matrix[(row1 + 1) % SIZE][col1];
            ciphertext[k++] = matrix[(row2 + 1) % SIZE][col2];
        } else {
            ciphertext[k++] = matrix[row1][col2];
            ciphertext[k++] = matrix[row2][col1];
        }
    }
    ciphertext[k] = '\0';
}

int main() {
    char key[100], plaintext[100], ciphertext[100];
    char matrix[SIZE][SIZE];
    
    printf("Enter the keyword: ");
    scanf("%s", key);
    printf("Enter the plaintext: ");
    scanf("%s", plaintext);
    
    createMatrix(key, matrix);
    encrypt(plaintext, matrix, ciphertext);
    
    printf("Ciphertext: %s\n", ciphertext);
    return 0;
}
